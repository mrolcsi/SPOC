buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.1'
        classpath 'io.fabric.tools:gradle:1.19.2'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url 'https://maven.fabric.io/public' }
}

def makeVersionCode = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', 'HEAD', '--count'
            standardOutput = code
        }
        return Integer.parseInt(code.toString().trim())
    }
    catch (ignored) {
        logger.error(ignored.printStackTrace())
        return -1;
    }
}

def makeVersionNameRelease = { ->
    try {
        def lastTag = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--tags', '--no-walk', '--max-count=1'
            standardOutput = lastTag
        }

        logger.info("*** Last Tag: " + lastTag.toString().trim())

        def lastCommits = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', lastTag.toString().trim() + '..HEAD', '--count'
            standardOutput = lastCommits
        }

        logger.info("*** Last Commits: " + lastCommits.toString().trim())

        def versionName = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = versionName
        }

        logger.info("*** Version Name: " + versionName.toString().trim())

        if (Integer.parseInt(lastCommits.toString().trim()) == 0) {
            return 'v' + versionName.toString().trim()
        } else {
            return 'v' + versionName.toString().trim() + '.' + lastCommits.toString().trim()
        }
    }
    catch (ignored) {
        logger.error(ignored.printStackTrace())
        return null;
    }
}

def makeVersionNameDebug = { ->
    try {

        def releaseName = makeVersionNameRelease()

        logger.info("*** Release Name: " + releaseName)

        def currentBranch = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = currentBranch
        }

        logger.info("*** Current Branch: " + currentBranch.toString().trim())

        return releaseName + '/' + currentBranch.toString().trim()
    }
    catch (ignored) {
        logger.error(ignored.printStackTrace())
        return null;
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def file = output.outputFile
            //output.outputFile = new File(file.parent, file.name.replace(".apk", "-" + makeVersionNameRelease() + ".apk"))
            def name = "SPOC-" + makeVersionNameRelease() + "-" + variant.buildType.getName() + ".apk"
            output.outputFile = new File(file.parent, name)
        }
    }

    defaultConfig {
        applicationId "hu.mrolcsi.android.spoc"
        minSdkVersion 10
        targetSdkVersion 23
        versionCode makeVersionCode()
        versionName makeVersionNameDebug()
    }

    signingConfigs {
        release {
            storeFile file("keystore.jks")
            storePassword "p4SsW0rd"
            keyAlias "SPOC KeyStore"
            keyPassword "p4SsW0rd"
        }
    }

    buildTypes {
        debug {
            resValue "string", "GOOGLE_API_KEY", "AIzaSyA-tHmuOBZILXBga1MOvMoBmoQzPd1gXJA"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            resValue "string", "GOOGLE_API_KEY", "AIzaSyA9x-6OAtrXjluHeowrUUXz-scwynNeCdQ"
        }
    }

    lintOptions {
        disable 'IconDensities'
    }
}

dependencies {
    compile project(':SPOC Common')
    compile project(':core')
    compile project(':layouts')
    compile project(':FileBrowser')
    compile 'com.android.support:design:22.2.0'
    compile 'com.android.support:support-v4:23.0.1'
    compile 'com.android.support:recyclerview-v7:21.0.3'
    compile 'com.google.android.gms:play-services:8.1.0'
    compile 'com.github.chrisbanes.photoview:library:1.2.3'
    compile 'com.github.machinarius:preferencefragment:0.1.2'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.0@aar') {
        transitive = true;
    }
}
