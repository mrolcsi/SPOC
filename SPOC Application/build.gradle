buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.1'
        classpath 'io.fabric.tools:gradle:1.19.2'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url 'https://maven.fabric.io/public' }
}

def makeVersionCode = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', 'HEAD', '--count'
            standardOutput = code
        }
        return Integer.parseInt(code.toString().trim())
    }
    catch (ignored) {
        logger.error(ignored.printStackTrace())
        return -1;
    }
}

def makeVersionNameRelease = { ->
    try {
        def lastTag = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--tags', '--no-walk', '--max-count=1'
            standardOutput = lastTag
        }

        def lastCommits = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', lastTag.toString().trim() + '..HEAD'
            standardOutput = lastCommits
        }

        def versionName = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = versionName
        }

        return 'v' + versionName.toString().trim() + '-' + lastCommits.toString().trim()
    }
    catch (ignored) {
        logger.error(ignored.printStackTrace())
        return null;
    }
}

def makeVersionNameDebug = { ->
    try {
        def lastTag = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--tags', '--no-walk', '--max-count=1'
            standardOutput = lastTag
        }

        def lastCommits = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', lastTag.toString().trim() + '..HEAD', '--count'
            standardOutput = lastCommits
        }

        def versionName = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = versionName
        }

        def currentBranch = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = currentBranch
        }

        return 'v' + versionName.toString().trim() + '.' + lastCommits.toString().trim() + '/' + currentBranch.toString().trim()
    }
    catch (ignored) {
        logger.error(ignored.printStackTrace())
        return null;
    }
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "hu.mrolcsi.android.spoc"
        minSdkVersion 10
        targetSdkVersion 22
        versionCode makeVersionCode()
        versionName makeVersionNameDebug()
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':SPOC Common')
    compile 'com.android.support:design:22.2.0'
    compile 'com.github.bumptech.glide:glide:3.6.0'
    compile 'com.android.support:support-v4:22.2.1'
    compile 'com.android.support:recyclerview-v7:21.0.3'
    compile 'com.github.chrisbanes.photoview:library:1.2.3'
    compile project(':core')
    compile project(':layouts')
    compile 'com.github.machinarius:preferencefragment:0.1.2'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.0@aar') {
        transitive = true;
    }
}
